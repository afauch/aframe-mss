/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var main = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16,17,31,34,35],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,23],$V8=[1,24],$V9=[1,16,17,31,34,35,64,66,67],$Va=[2,76],$Vb=[16,17,31,34,35,64],$Vc=[2,20],$Vd=[1,30],$Ve=[2,14],$Vf=[1,31],$Vg=[14,16,17,19,23,26,31,34,35,64],$Vh=[1,34],$Vi=[2,25],$Vj=[2,74],$Vk=[16,17,21,47],$Vl=[16,17,31,34,35],$Vm=[1,44],$Vn=[1,7,9,13,14,16,17,19,21,23,26,31,34,35,36,39,40,41,42,43,44,47,48,50,55,56,57,58,59,60,61,63,64,66,67],$Vo=[1,53],$Vp=[1,54],$Vq=[1,50],$Vr=[16,17,21,47,64],$Vs=[2,15],$Vt=[7,9,13,14,16,31,55,56,57,58,59,61],$Vu=[7,16,64],$Vv=[1,86],$Vw=[1,88],$Vx=[1,84],$Vy=[1,85],$Vz=[1,87],$VA=[1,91],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,89],$VH=[1,100],$VI=[1,101],$VJ=[1,99],$VK=[7,9,13,14,16,17,21,23,31,39,47,50,55,56,57,58,59,60,61,63,64],$VL=[7,9,13,14,16,17,21,23,31,39,47,50,55,56,57,58,59,60,61,63],$VM=[55,56,57,58,59],$VN=[36,64];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"stylesheet":3,"space_cdata_list":4,"general_list":5,"string_or_uri":6,"STRING":7,"wempty":8,"URI":9,"general_item":10,"ruleset":11,"unary_operator":12,"-":13,"+":14,"property":15,"IDENT":16,"*":17,"selector_list":18,"{":19,"declaration_list":20,"}":21,"selector":22,",":23,"simple_selector":24,"combinator":25,">":26,"simple_selector_atom_list":27,"whitespace":28,"element_name":29,"simple_selector_atom":30,"HASH":31,"class":32,"attrib":33,".":34,"[":35,"]":36,"attrib_operator":37,"attrib_value":38,"=":39,"INCLUDES":40,"DASHMATCH":41,"PREFIXMATCH":42,"SUFFIXMATCH":43,"SUBSTRINGMATCH":44,"declaration_parts":45,"declaration":46,";":47,":":48,"expr":49,"IMPORTANT_SYM":50,"term":51,"operator":52,"computable_term":53,"string_term":54,"NUMBER":55,"PERCENTAGE":56,"ANGLE":57,"TIME":58,"FUNCTION":59,")":60,"UNICODERANGE":61,"hexcolor":62,"/":63,"S":64,"space_cdata":65,"CDO":66,"CDC":67,"$accept":0,"$end":1},
terminals_: {2:"error",7:"STRING",9:"URI",13:"-",14:"+",16:"IDENT",17:"*",19:"{",21:"}",23:",",26:">",31:"HASH",34:".",35:"[",36:"]",39:"=",40:"INCLUDES",41:"DASHMATCH",42:"PREFIXMATCH",43:"SUFFIXMATCH",44:"SUBSTRINGMATCH",47:";",48:":",50:"IMPORTANT_SYM",55:"NUMBER",56:"PERCENTAGE",57:"ANGLE",58:"TIME",59:"FUNCTION",60:")",61:"UNICODERANGE",63:"/",64:"S",66:"CDO",67:"CDC"},
productions_: [0,[3,2],[6,2],[6,2],[5,1],[5,2],[5,0],[10,1],[10,1],[12,1],[12,1],[15,2],[15,3],[11,6],[18,1],[18,4],[22,1],[22,3],[25,2],[25,2],[25,0],[24,2],[24,3],[27,1],[27,2],[27,0],[30,1],[30,1],[30,1],[32,2],[29,1],[29,1],[33,5],[33,9],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[38,1],[38,1],[20,1],[20,2],[45,1],[45,1],[45,1],[46,5],[46,6],[46,0],[49,1],[49,3],[49,2],[51,1],[51,2],[51,1],[53,2],[53,2],[53,2],[53,2],[53,5],[54,2],[54,2],[54,2],[54,2],[54,1],[52,2],[52,2],[52,2],[52,0],[62,2],[28,1],[28,2],[8,1],[8,0],[4,1],[4,2],[4,0],[65,1],[65,1],[65,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      this.$ = {};
      // $$[$0] respectively corresponds to output of general_list.
      if ($$[$0]) {
        this.$['rulelist'] = $$[$0];
      }
      return this.$;
    
break;
case 2: case 3: case 11: case 18: case 19: case 56: case 57: case 58: case 59: case 61: case 62: case 63: case 64: case 66: case 67: case 68: case 70:
this.$ = $$[$0-1];
break;
case 4:

  		this.$ = [];
  		if ($$[$0] !== null)
  			this.$.push($$[$0]);
  	
break;
case 5:

  		this.$ = $$[$0-1];
  		this.$.push($$[$0]);
  	
break;
case 6: case 8: case 45: case 46: case 49: case 75: case 76: case 78: case 79: case 80:
this.$ = null;
break;
case 7: case 9: case 10: case 14: case 16: case 23: case 26: case 27: case 28: case 30: case 31: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 44: case 50: case 53: case 55: case 65: case 73:
this.$ = $$[$0];
break;
case 12:
this.$ = $$[$0-2] + $$[$0-1]  // cwdoh.;
break;
case 13:
this.$ = { "type": "style", "selector": $$[$0-5], "declarations": $$[$0-2] };
break;
case 15:
this.$ = $$[$0-3] + $$[$0-2] + ' ' + $$[$0];
break;
case 17: case 51:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 20: case 25: case 69: case 74:
this.$ = "";
break;
case 21:
this.$ = $$[$0-1] + " ";
break;
case 22:
this.$ = $$[$0-2] + $$[$0-1];
break;
case 24: case 29: case 54:
this.$ = $$[$0-1] + $$[$0];
break;
case 32:
this.$ = $$[$0-4] + $$[$0-2] + $$[$0];
break;
case 33:
this.$ = $$[$0-8] + $$[$0-6] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0];
break;
case 42:

  		this.$ = {};
  		if ( $$[$0] !== null ) {
        if(!this.$[ $$[$0][0] ]){
          this.$[ $$[$0][0] ] = $$[$0][1];
        } else if(Object.prototype.toString.call(this.$[ $$[$0][0] ]) === '[object Array]') {
          this.$[ $$[$0][0] ].push($$[$0][1]);
        } else {
          this.$[ $$[$0][0] ] = [ this.$[ $$[$0][0] ], $$[$0][1] ];
        }
  		}
  	
break;
case 43:

  		this.$ = $$[$0-1];
  		if ( $$[$0] !== null ) {
        if(!this.$[ $$[$0][0] ]){
          this.$[ $$[$0][0] ] = $$[$0][1];
        } else if(Object.prototype.toString.call(this.$[ $$[$0][0] ]) === '[object Array]') {
          this.$[ $$[$0][0] ].push($$[$0][1]);
        } else {
          this.$[ $$[$0][0] ] = [ this.$[ $$[$0][0] ], $$[$0][1] ];
        }
	  	}
  	
break;
case 47:
this.$ = [ $$[$0-4], $$[$0-1] ];
break;
case 48:
this.$ = [ $$[$0-5], $$[$0-2] + " !important" ];
break;
case 52:
this.$ = $$[$0-1] + ' ' + $$[$0];
break;
case 60:
this.$ = $$[$0-4] + $$[$0-2] + $$[$0-1];
break;
case 71: case 72:
this.$ = ' ';
break;
}
},
table: [o($V0,[2,77],{3:1,4:2,65:3,64:$V1,66:$V2,67:$V3}),{1:[3]},{1:[2,6],4:11,5:7,10:9,11:10,16:$V4,17:$V5,18:12,22:13,24:14,27:15,29:16,30:17,31:$V6,32:21,33:22,34:$V7,35:$V8,64:$V1,65:8,66:$V2,67:$V3},o($V9,[2,75]),o($V9,[2,78]),o($V9,[2,79]),o($V9,[2,80]),{1:[2,1],4:11,10:25,11:10,16:$V4,17:$V5,18:12,22:13,24:14,27:15,29:16,30:17,31:$V6,32:21,33:22,34:$V7,35:$V8,64:$V1,65:3,66:$V2,67:$V3},o($V9,$Va),o($V9,[2,4]),o($V9,[2,7]),o($V0,[2,8],{65:26,64:$V1,66:$V2,67:$V3}),{19:[1,27],23:[1,28]},o($Vb,$Vc,{25:29,14:$Vd,19:$Ve,23:$Ve,26:$Vf}),o($Vg,[2,16]),{28:32,30:33,31:$V6,32:21,33:22,34:$V7,35:$V8,64:$Vh},o([14,16,17,19,23,26,64],$Vi,{30:17,32:21,33:22,27:35,31:$V6,34:$V7,35:$V8}),o($Vg,[2,23]),o($Vg,[2,30]),o($Vg,[2,31]),o($Vg,[2,26]),o($Vg,[2,27]),o($Vg,[2,28]),{16:[1,36]},{8:37,16:$Vj,28:38,64:$Vh},o($V9,[2,5]),o($V9,$Va),o($Vk,$Vj,{28:38,8:39,64:$Vh}),o($Vl,$Vj,{28:38,8:40,64:$Vh}),{16:$V4,17:$V5,24:41,27:15,29:16,30:17,31:$V6,32:21,33:22,34:$V7,35:$V8,64:$Vi},o($Vl,$Vj,{28:38,8:42,64:$Vh}),o($Vl,$Vj,{28:38,8:43,64:$Vh}),o([14,16,17,19,23,26,31,34,35],[2,21],{64:$Vm}),o($Vg,[2,24]),o($Vn,[2,71]),o([14,16,17,19,23,26],$Vj,{32:21,33:22,30:33,28:38,8:45,31:$V6,34:$V7,35:$V8,64:$Vh}),o($Vg,[2,29]),{16:[1,46]},o([1,7,9,13,14,16,17,19,21,23,26,31,34,35,36,39,40,41,42,43,44,47,48,50,55,56,57,58,59,60,61,63,66,67],[2,73],{64:$Vm}),{8:51,15:52,16:$Vo,17:$Vp,20:47,21:[2,49],28:38,45:48,46:49,47:$Vq,64:$Vh},{16:$V4,17:$V5,22:55,24:14,27:15,29:16,30:17,31:$V6,32:21,33:22,34:$V7,35:$V8,64:$Vi},o($Vg,[2,17]),o($Vb,[2,18]),o($Vb,[2,19]),o($Vn,[2,72]),o($Vg,[2,22]),o([36,39,40,41,42,43,44],$Vj,{28:38,8:56,64:$Vh}),{8:51,15:52,16:$Vo,17:$Vp,21:[1,57],28:38,45:58,46:49,47:$Vq,64:$Vh},o($Vr,[2,42]),o($Vr,[2,44]),o($Vr,[2,45]),o($Vr,[2,46]),{48:[1,59]},{8:60,28:38,48:$Vj,64:$Vh},{16:[1,61]},o($Vb,$Vc,{25:29,14:$Vd,19:$Vs,23:$Vs,26:$Vf}),{36:[1,62],37:63,39:[1,64],40:[1,65],41:[1,66],42:[1,67],43:[1,68],44:[1,69]},o([1,16,17,31,34,35,66,67],$Vj,{28:38,8:70,64:$Vh}),o($Vr,[2,43]),o($Vt,$Vj,{28:38,8:71,64:$Vh}),{48:[2,11]},{8:72,28:38,48:$Vj,64:$Vh},o($Vg,[2,32]),o([7,16],$Vj,{28:38,8:73,64:$Vh}),o($Vu,[2,34]),o($Vu,[2,35]),o($Vu,[2,36]),o($Vu,[2,37]),o($Vu,[2,38]),o($Vu,[2,39]),o($V9,[2,13]),{7:$Vv,9:$Vw,12:77,13:$Vx,14:$Vy,16:$Vz,31:$VA,49:74,51:75,53:76,54:78,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,61:$VG,62:90},{48:[2,12]},{7:[1,94],16:[1,93],38:92},o([17,21,47],$Vj,{28:38,53:76,12:77,54:78,62:90,8:95,52:97,51:98,7:$Vv,9:$Vw,13:$Vx,14:$Vy,16:$Vz,23:$VH,31:$VA,39:$VI,50:[1,96],55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,61:$VG,63:$VJ,64:$Vh}),o($VK,[2,50]),o($VK,[2,53]),{53:102,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF},o($VK,[2,55]),o($VL,$Vj,{28:38,8:103,64:$Vh}),o($VL,$Vj,{28:38,8:104,64:$Vh}),o($VL,$Vj,{28:38,8:105,64:$Vh}),o($VL,$Vj,{28:38,8:106,64:$Vh}),o($Vt,$Vj,{28:38,8:107,64:$Vh}),o($VM,[2,9]),o($VM,[2,10]),o($VL,$Vj,{28:38,8:108,64:$Vh}),o($VL,$Vj,{28:38,8:109,64:$Vh}),o($VL,$Vj,{28:38,8:110,64:$Vh}),o($VL,$Vj,{28:38,8:111,64:$Vh}),o($VK,[2,65]),o($VL,$Vj,{28:38,8:112,64:$Vh}),{8:113,28:38,36:$Vj,64:$Vh},o($VN,[2,40]),o($VN,[2,41]),o($Vr,[2,47]),o($Vk,$Vj,{28:38,8:114,64:$Vh}),{7:$Vv,9:$Vw,12:77,13:$Vx,14:$Vy,16:$Vz,31:$VA,51:115,53:76,54:78,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,61:$VG,62:90},o($VK,[2,52]),o($Vt,$Vj,{28:38,8:116,64:$Vh}),o($Vt,$Vj,{28:38,8:117,64:$Vh}),o($Vt,$Vj,{28:38,8:118,64:$Vh}),o($VK,[2,54]),o($VK,[2,56]),o($VK,[2,57]),o($VK,[2,58]),o($VK,[2,59]),{7:$Vv,9:$Vw,12:77,13:$Vx,14:$Vy,16:$Vz,31:$VA,49:119,51:75,53:76,54:78,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,61:$VG,62:90},o($VK,[2,61]),o($VK,[2,62]),o($VK,[2,63]),o($VK,[2,64]),o($VK,[2,70]),{36:[1,120]},o($Vr,[2,48]),o($VK,[2,51]),o($Vt,[2,66]),o($Vt,[2,67]),o($Vt,[2,68]),{7:$Vv,9:$Vw,12:77,13:$Vx,14:$Vy,16:$Vz,23:$VH,31:$VA,39:$VI,51:98,52:97,53:76,54:78,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:[1,121],61:$VG,62:90,63:$VJ},o($Vg,[2,33]),o($VL,$Vj,{28:38,8:122,64:$Vh}),o($VK,[2,60])],
defaultActions: {60:[2,11],72:[2,12]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 64;
break;
case 1:
break;
case 2:return 66;
break;
case 3:return 67;
break;
case 4:return 40;
break;
case 5:return 41;
break;
case 6:return 42;
break;
case 7:return 43;
break;
case 8:return 44;
break;
case 9:return 9;
break;
case 10:return 9;
break;
case 11:return "FUNCTION";
break;
case 12:return 7;
break;
case 13:return 16;
break;
case 14:return 31;
break;
case 15:return 'PAGE_SYM';
break;
case 16:return 57;
break;
case 17:return 57;
break;
case 18:return 58;
break;
case 19:return 58;
break;
case 20:return 'DIMEN';
break;
case 21:return 56;
break;
case 22:return 55;
break;
case 23:return 61;
break;
case 24:return 61;
break;
case 25:return yy_.yytext;
break;
}
},
rules: [/^(?:[ \t\r\n\f]+)/,/^(?:\/\*[^*]*\*+([^/][^*]*\*+)*\/)/,/^(?:<!--)/,/^(?:-->)/,/^(?:~=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:\$=)/,/^(?:\*=)/,/^(?:url\(([ \t\r\n\f]*)(("([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|'|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|"|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*'))([ \t\r\n\f]*)\))/,/^(?:url\(([ \t\r\n\f]*)(([!#$%&*-~]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*)([ \t\r\n\f]*)\))/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*)\()/,/^(?:(("([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|'|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|"|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:#(([_]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))+))/,/^(?:@page\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))deg\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))rad\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))ms\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))s\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))%)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+)))/,/^(?:U\+(\?{1,6}|([0-9a-fA-F])(\?{0,5}|([0-9a-fA-F])(\?{0,4}|([0-9a-fA-F])(\?{0,3}|([0-9a-fA-F])(\?{0,2}|([0-9a-fA-F])(\??|([0-9a-fA-F]))))))))/,/^(?:U\+([0-9a-fA-F]){1,6}([0-9a-fA-F]){1,6})/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = main;
exports.Parser = main.Parser;
exports.parse = function () { return main.parse.apply(main, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}